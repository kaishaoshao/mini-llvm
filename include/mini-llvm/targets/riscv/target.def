// https://github.com/riscv-non-isa/riscv-elf-psabi-doc/releases/download/v1.0/riscv-abi.pdf

#ifdef REGS
    // idx, name, class, isPreserved, isAllocatable
    X(0, x0, GPR, true, false)
    X(1, ra, GPR, false, false)
    X(2, sp, GPR, true, false)
    X(3, gp, GPR, false, false)
    X(4, tp, GPR, false, false)
    X(5, t0, GPR, false, true)
    X(6, t1, GPR, false, true)
    X(7, t2, GPR, false, true)
    X(8, fp, GPR, true, true)
    X(9, s1, GPR, true, true)
    X(10, a0, GPR, false, true)
    X(11, a1, GPR, false, true)
    X(12, a2, GPR, false, true)
    X(13, a3, GPR, false, true)
    X(14, a4, GPR, false, true)
    X(15, a5, GPR, false, true)
    X(16, a6, GPR, false, true)
    X(17, a7, GPR, false, true)
    X(18, s2, GPR, true, true)
    X(19, s3, GPR, true, true)
    X(20, s4, GPR, true, true)
    X(21, s5, GPR, true, true)
    X(22, s6, GPR, true, true)
    X(23, s7, GPR, true, true)
    X(24, s8, GPR, true, true)
    X(25, s9, GPR, true, true)
    X(26, s10, GPR, true, true)
    X(27, s11, GPR, true, true)
    X(28, t3, GPR, false, true)
    X(29, t4, GPR, false, true)
    X(30, t5, GPR, false, true)
    X(31, t6, GPR, false, true)

    X(32, ft0, FPR, false, true)
    X(33, ft1, FPR, false, true)
    X(34, ft2, FPR, false, true)
    X(35, ft3, FPR, false, true)
    X(36, ft4, FPR, false, true)
    X(37, ft5, FPR, false, true)
    X(38, ft6, FPR, false, true)
    X(39, ft7, FPR, false, true)
    X(40, fs0, FPR, true, true)
    X(41, fs1, FPR, true, true)
    X(42, fa0, FPR, false, true)
    X(43, fa1, FPR, false, true)
    X(44, fa2, FPR, false, true)
    X(45, fa3, FPR, false, true)
    X(46, fa4, FPR, false, true)
    X(47, fa5, FPR, false, true)
    X(48, fa6, FPR, false, true)
    X(49, fa7, FPR, false, true)
    X(50, fs2, FPR, true, true)
    X(51, fs3, FPR, true, true)
    X(52, fs4, FPR, true, true)
    X(53, fs5, FPR, true, true)
    X(54, fs6, FPR, true, true)
    X(55, fs7, FPR, true, true)
    X(56, fs8, FPR, true, true)
    X(57, fs9, FPR, true, true)
    X(58, fs10, FPR, true, true)
    X(59, fs11, FPR, true, true)
    X(60, ft8, FPR, false, true)
    X(61, ft9, FPR, false, true)
    X(62, ft10, FPR, false, true)
    X(63, ft11, FPR, false, true)
#endif // REGS

#ifdef INTEGER_RESULT_REGS
    X(a0)
    X(a1)
#endif // INTEGER_RESULT_REGS

#ifdef INTEGER_ARG_REGS
    X(a0)
    X(a1)
    X(a2)
    X(a3)
    X(a4)
    X(a5)
    X(a6)
    X(a7)
#endif // INTEGER_ARG_REGS

#ifdef FLOATING_RESULT_REGS
    X(fa0)
    X(fa1)
#endif // FLOATING_RESULT_REGS

#ifdef FLOATING_ARG_REGS
    X(fa0)
    X(fa1)
    X(fa2)
    X(fa3)
    X(fa4)
    X(fa5)
    X(fa6)
    X(fa7)
#endif // FLOATING_ARG_REGS

// https://github.com/riscv/riscv-isa-manual/releases/download/20240411/unpriv-isa-asciidoc.pdf

#ifdef OPS
    // opcode, mnemonic, name
    X(0, "lui", LUI)
    X(1, "auipc", AUIPC)
    X(2, "li", LI)
    X(3, "la", LA)
    X(4, "lb", LB)
    X(5, "lbu", LBU)
    X(6, "lh", LH)
    X(7, "lhu", LHU)
    X(8, "lw", LW)
    X(9, "lwu", LWU)
    X(10, "ld", LD)
    X(11, "sb", SB)
    X(12, "sh", SH)
    X(13, "sw", SW)
    X(14, "sd", SD)
    X(15, "mv", Mv)
    X(16, "neg", Neg)
    X(17, "add", Add)
    X(18, "addw", AddW)
    X(19, "sub", Sub)
    X(20, "subw", SubW)
    X(21, "mul", Mul)
    X(22, "mulw", MulW)
    X(23, "div", Div)
    X(24, "divw", DivW)
    X(25, "divu", DivU)
    X(26, "divuw", DivUW)
    X(27, "rem", Rem)
    X(28, "remw", RemW)
    X(29, "remu", RemU)
    X(30, "remuw", RemUW)
    X(31, "not", Not)
    X(32, "and", And)
    X(33, "or", Or)
    X(34, "xor", Xor)
    X(35, "sll", SLL)
    X(36, "sllw", SLLW)
    X(37, "srl", SRL)
    X(38, "srlw", SRLW)
    X(39, "sra", SRA)
    X(40, "sraw", SRAW)
    X(41, "addi", AddI)
    X(42, "addiw", AddIW)
    X(43, "andi", AndI)
    X(44, "ori", OrI)
    X(45, "xori", XorI)
    X(46, "slli", SLLI)
    X(47, "slliw", SLLIW)
    X(48, "srli", SRLI)
    X(49, "srliw", SRLIW)
    X(50, "srai", SRAI)
    X(51, "sraiw", SRAIW)
    X(52, "sext.w", SExtW)
    X(53, "seqz", SEQZ)
    X(54, "snez", SNEZ)
    X(55, "slt", SLT)
    X(56, "sltu", SLTU)
    X(57, "sltz", SLTZ)
    X(58, "sgt", SGT)
    X(59, "sgtu", SGTU)
    X(60, "sgtz", SGTZ)
    X(61, "j", J)
    X(62, "call", Call)
    X(63, "ret", Ret)
    X(64, "jal", JAL)
    X(65, "jalr", JALR)
    X(66, "beq", BEQ)
    X(67, "beqz", BEQZ)
    X(68, "bne", BNE)
    X(69, "bnez", BNEZ)
    X(70, "blt", BLT)
    X(71, "bltu", BLTU)
    X(72, "bltz", BLTZ)
    X(73, "bgt", BGT)
    X(74, "bgtu", BGTU)
    X(75, "bgtz", BGTZ)
    X(76, "ble", BLE)
    X(77, "bleu", BLEU)
    X(78, "blez", BLEZ)
    X(79, "bge", BGE)
    X(80, "bgeu", BGEU)
    X(81, "bgez", BGEZ)
    X(82, "flw", FLW)
    X(83, "fld", FLD)
    X(84, "fsw", FSW)
    X(85, "fsd", FSD)
    X(86, "fmv.s", FMvS)
    X(87, "fmv.d", FMvD)
    X(88, "fmv.w.x", FMvWX)
    X(89, "fmv.d.x", FMvDX)
    X(90, "fmv.x.w", FMvXW)
    X(91, "fmv.x.d", FMvXD)
    X(92, "fneg.s", FNegS)    
    X(93, "fneg.d", FNegD)
    X(94, "fadd.s", FAddS)
    X(95, "fadd.d", FAddD)
    X(96, "fsub.s", FSubS)
    X(97, "fsub.d", FSubD)
    X(98, "fmul.s", FMulS)
    X(99, "fmul.d", FMulD)
    X(100, "fdiv.s", FDivS)
    X(101, "fdiv.d", FDivD)
    X(102, "feq.s", FEQS)
    X(103, "feq.d", FEQD)
    X(104, "flt.s", FLTS)
    X(105, "flt.d", FLTD)
    X(106, "fgt.s", FGTS)
    X(107, "fgt.d", FGTD)
    X(108, "fle.s", FLES)
    X(109, "fle.d", FLED)
    X(110, "fge.s", FGES)
    X(111, "fge.d", FGED)
    X(112, "fcvt.s.d", FCvtSD)
    X(113, "fcvt.d.s", FCvtDS)
    X(114, "fcvt.s.w", FCvtSW)
    X(115, "fcvt.s.l", FCvtSL)
    X(116, "fcvt.s.wu", FCvtSWU)
    X(117, "fcvt.s.lu", FCvtSLU)
    X(118, "fcvt.d.w", FCvtDW)
    X(119, "fcvt.d.l", FCvtDL)
    X(120, "fcvt.d.wu", FCvtDWU)
    X(121, "fcvt.d.lu", FCvtDLU)
    X(122, "fcvt.w.s", FCvtWS)
    X(123, "fcvt.l.s", FCvtLS)
    X(124, "fcvt.wu.s", FCvtWUS)
    X(125, "fcvt.lu.s", FCvtLUS)
    X(126, "fcvt.w.d", FCvtWD)
    X(127, "fcvt.l.d", FCvtLD)
    X(128, "fcvt.wu.d", FCvtWUD)
    X(129, "fcvt.lu.d", FCvtLUD)
#endif // OPS
